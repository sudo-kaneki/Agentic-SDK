[tool:pytest]
# EnergyAI SDK - Pytest Configuration

# Test Discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Output and Verbosity
addopts =
    --verbose
    --tb=short
    --strict-config
    --strict-markers
    --disable-warnings
    --color=yes
    --durations=10
    --cov=energyai_sdk
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-fail-under=80

# Minimum version
minversion = 6.0

# Test markers
markers =
    unit: Unit tests (fast, isolated tests)
    integration: Integration tests (slower, may require external dependencies)
    e2e: End-to-end tests (full system tests)
    slow: Slow running tests
    network: Tests that require network access
    azure: Tests that require Azure services
    langfuse: Tests that require Langfuse integration
    semantic_kernel: Tests that require Semantic Kernel
    mock: Tests using mocked dependencies
    config: Configuration-related tests
    agent: Agent-specific tests
    tool: Tool-specific tests
    skill: Skill-specific tests
    middleware: Middleware tests
    application: Application framework tests
    decorator: Decorator tests

# Asyncio configuration
asyncio_mode = auto

# Filterwarnings
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::ImportWarning
    ignore:.*HTTPSConnection.*:urllib3.exceptions.InsecureRequestWarning

# Log configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Test timeout
timeout = 300
timeout_method = thread

# Cache
cache_dir = .pytest_cache

# Coverage configuration
[coverage:run]
source = energyai_sdk
omit =
    energyai_sdk/__init__.py
    tests/*
    setup.py
    conftest.py
    */venv/*
    */env/*
    */.tox/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod
