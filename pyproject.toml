# pyproject.toml
[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "energyai-sdk"
version = "1.0.0"
description = "AI Agent Platform for Energy Analytics - Semantic Kernel Wrapper"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "EnergyAI Team", email = "info@energyai.com"},
]
maintainers = [
    {name = "EnergyAI Team", email = "info@energyai.com"},
]
keywords = [
    "ai", "agents", "energy", "semantic-kernel", "openai", "azure",
    "renewable-energy", "analytics", "telemetry", "sdk"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering",
    "Topic :: Office/Business :: Financial",
]
requires-python = ">=3.11"
dependencies = [
    # Core dependencies
    "semantic-kernel",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",

    # Web framework (optional)
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "python-multipart>=0.0.6",

    # Telemetry (optional)
    "azure-monitor-opentelemetry-exporter>=1.0.0b21",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "langfuse>=2.0.0",

    # Configuration
    "PyYAML>=6.0",
    "python-dotenv>=1.0.0",

    # Utilities
    "typing-extensions>=4.8.0",
    "httpx>=0.25.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
]

# Testing dependencies
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-benchmark>=4.0.0",
    "pytest-xdist>=3.3.0",
    "httpx>=0.25.0",
    "respx>=0.20.0",
]

# Documentation dependencies
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
    "mkdocstrings[python]>=0.23.0",
    "mike>=1.1.0",
]

# All optional dependencies
all = [
    "energyai-sdk[dev,test,docs]"
]

[project.urls]
Homepage = "https://github.com/energyai/energyai-sdk"
Documentation = "https://energyai-sdk.readthedocs.io/"
Repository = "https://github.com/energyai/energyai-sdk.git"
"Bug Tracker" = "https://github.com/energyai/energyai-sdk/issues"
Changelog = "https://github.com/energyai/energyai-sdk/blob/main/CHANGELOG.md"

[project.scripts]
energyai = "energyai_sdk.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["energyai_sdk*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
energyai_sdk = ["py.typed", "*.yaml", "*.json"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["energyai_sdk"]
known_third_party = [
    "fastapi", "uvicorn", "pydantic", "semantic_kernel",
    "azure", "opentelemetry", "langfuse", "pytest"
]

# mypy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "semantic_kernel.*",
    "langfuse.*",
    "azure.*",
    "opentelemetry.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=energyai_sdk",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
    "requires_api_key: Tests requiring real API credentials",
    "requires_azure: Tests requiring Azure services",
    "requires_langfuse: Tests requiring Langfuse",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["energyai_sdk"]
omit = [
    "*/tests/*",
    "*/examples/*",
    "*/docs/*",
    "*/__pycache__/*",
    "*/.*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

# Ruff configuration (alternative to flake8)
[tool.ruff]
target-version = "py39"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*.py" = ["B011"]

# Bandit security linter configuration
[tool.bandit]
exclude_dirs = ["tests", "examples"]
skips = ["B101", "B601"]

# Development tool configurations
[tool.commitizen]
name = "cz_conventional_commits"
version = "1.0.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "energyai_sdk/__init__.py:__version__",
]

[tool.semantic_release]
version_variable = [
    "energyai_sdk/__init__.py:__version__",
    "pyproject.toml:version"
]
build_command = "pip install build && python -m build"
